<project name="@project-name@" default="webapp" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!--
	  - File and directory names
	  - ========================
	  -
	  - Only change these properties if you want to use
	  - another project layout.
	 -->

	<!-- Location of the project's source and resource files -->
	<property name="src.dir" value="src" />

	<!-- The web content -->
	<property name="web.dir" value="webapp" />

	<!-- Location of the WEB-INF/lib directory -->
	<property name="web.lib.dir" value="${web.dir}/WEB-INF/lib" />

	<!-- Directory where libraries are stored that are not needed at runtime -->
	<property name="lib.dir" value="lib" />

	<!-- Directory where classes and artifacts are created -->
	<property name="build.dir" value="build" />

	<!-- Directory where the compile target will generate the class files -->
	<property name="build.classes.dir" value="${build.dir}/classes" />

	<!-- The default configuration profile -->
	<property name="profile" value="${user.name}" />

	<!-- Location of the different confiuration profiles -->
	<property name="conf.dir" value="conf" />

	<!-- Directory where the merged configuration files are created -->
	<property name="build.conf.dir" value="${build.dir}/conf" />

	<!-- Name of the jar file created by the jar target -->
	<property name="jar.name" value="${ant.project.name}.jar" />

	<!-- Name of the war file created by the war target -->
	<property name="war.name" value="${ant.project.name}-${profile}.war" />

	<!-- Location of the war file created by the war target -->
	<property name="war.location" location="${build.dir}/${war.name}" />

	<!-- Name of the schema file created by the export-schema target -->
	<property name="schema.name" value="${ant.project.name}-${profile}.sql" />

	<!-- Location of the hsqldb files -->
	<property name="hsqldb.shared.dir" value="hsqldb" />
	<property name="hsqldb.local.dir" value="${build.dir}/hsqldb" />
	<property name="hsqldb.location" location="${hsqldb.local.dir}/${ant.project.name}" />

	<property name="ivy.download" value="http://riotfamily.org/ivy/ivy-2.0.0-alpha-1-incubating.jar" />
	<property name="ivy.jar" value="${lib.dir}/ivy.jar" />

	<taskdef resource="org/apache/ivy/ant/antlib.xml"
			uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar}"
			onerror="ignore" />

	<!--
	  - The classpath. Includes all jar files in lib and WEB-INF/lib.
	  -->
	<path id="classpath">
		<fileset dir="${lib.dir}" includes="*.jar" />
		<fileset dir="${web.lib.dir}" includes="*.jar" />
		<pathelement path="${java.class.path}" />
	</path>

	<!--
	  - Resource files to be included in the jar. By default all files found
	  - the source directory are included except for .java files and Ant's
	  - default excludes.
	 -->
	<patternset id="jar.resource.patterns">
		<exclude name="**/*.java" />
	</patternset>

	<!--
	  - Creates output directories.
	 -->
	<target name="init">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${lib.dir}" />
		<mkdir dir="${web.lib.dir}" />
		<available property="hsqldb.local.available" file="${hsqldb.local.dir}" />
		<available property="hsqldb.shared.available" file="${hsqldb.shared.dir}" />
	</target>
	
	<!--
	  - Cleans the output directories.
	 -->
	<target name="clean" description="Cleans the project">
		<delete dir="${build.dir}" />
		<delete dir="${lib.dir}" />
		<delete dir="${web.lib.dir}" />
	</target>

	<!--
	  - Configures the project by merging the selected configuration files.
	 -->
	<target name="configure" depends="init,-init-local-db" description="Configures the project">
		<echo>Merging configuration. Profile: ${profile}</echo>
		<merge-properties name="application" />
		<merge-properties name="log4j" />
	</target>

	<!--
	  - Resolves the project's dependencies. Runtime dependencies are copied
	  - to ${web.lib.dir} (webapp/WEB-INF/lib). Dependencies that are provided
	  - by the container during runtime, but are required in order to compile
	  - the project with Ant are copied to ${lib.dir}.
	 -->
	<target name="resolve" depends="init,-configure-ivy"
			description="Resolves the project's dependencies">
		<echo message="Retrieving module dependencies" />
		<ivy:resolve showprogress="false" />
		<ivy:retrieve pattern="${web.lib.dir}/[artifact].[ext]" conf="runtime" />
		<ivy:retrieve pattern="${lib.dir}/[artifact].[ext]" conf="standalone" />
	</target>

	<!--
	  - Compiles the java sources to ${build.classes.dir}. Additionally all
	  - files matched by the jar.resource.patterns patternset are copied.
	 -->
	<target name="compile" depends="init"
			description="Compiles the project's Java sources">
		<mkdir dir="${build.classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${build.classes.dir}" deprecation="on" debug="on">
			<classpath refid="classpath" />
		</javac>
		<copy todir="${build.classes.dir}">
			<fileset dir="${src.dir}">
				<patternset refid="jar.resource.patterns" />
			</fileset>
		</copy>
	</target>

	<!--
	  - Copys the compiled classes (and merged properties) to WEB-INF/classes.
	 -->
	<target name="webapp" depends="configure,compile"
			description="Copys the compiled classes to WEB-INF/classes">
		<copy todir="${web.dir}/WEB-INF/classes">
			<fileset dir="${build.classes.dir}" />
			<fileset dir="${build.conf.dir}" />
		</copy>
	</target>

	<!--
	  - Creates a jar file containing all files in ${build.classes.dir}.
	 -->
	<target name="jar" depends="compile"
			description="Creates a Jar file containing the files in /build/classes">
		<jar jarfile="${build.dir}/${jar.name}">
			<fileset dir="${build.classes.dir}" />
		</jar>
	</target>

	<!--
	  - Creates a war file.
	 -->
	<target name="war" depends="configure,jar" description="Creates a WAR archive">
		<delete file="${war.location}" />
		<war destfile="${war.location}" webxml="${web.dir}/WEB-INF/web.xml">
			<fileset dir="${web.dir}">
				<exclude name="WEB-INF/web.xml" />
				<exclude name="WEB-INF/classes/**" />
				<exclude name="WEB-INF/temp/**" />
				<exclude name="media" />
				<exclude name="media/**" />
			</fileset>
			<lib file="${build.dir}/${jar.name}" />
			<classes dir="${build.conf.dir}" />
				</war>
	</target>

	<!--
	  - Deploys a war file.
	 -->
	<target name="deploy"
		depends="-backup-config,war,-restore-config,-upload-war,-exec-deploy-command"
		description="Deploys a WAR file to a remote server via SCP">
	</target>

	<!--
	  - Uploads a WAR file via scp.
	 -->
	<target name="-upload-war">
		<!-- Check if JSch is available -->
		<available classname="com.jcraft.jsch.JSchException" property="jsch.available" value="true" />
		<fail unless="jsch.available" message="The deploy target uses the scp and sshexec tasks which both depend on jsch.jar. See http://ant.apache.org/manual/install.html#librarydependencies for details." />

		<!-- Read properties from the deploy.properties file(s) -->
		<property file="${conf.dir}/${profile}/deploy.properties" />
		<property file="${conf.dir}/default/deploy.properties" />

		<fail unless="deploy.host" message="The property deploy.host must be specified in ${conf.dir}/$${profile}/deploy.properties" />

		<!-- Set some reasonable defaults -->
		<property name="deploy.user.name" value="${user.name}" />
		<property name="deploy.keyfile" value="${user.home}/.ssh/id_rsa" />
		<property name="deploy.passphrase" value="" />
		<property name="deploy.upload.dir" value="~" />

		<!-- Append a timestamp to the remote filename -->
		<tstamp>
			<format property="deploy.timestamp" pattern="yyyyMMddHHmmss" />
		</tstamp>
		<property name="deploy.upload.name" value="${ant.project.name}-${deploy.timestamp}.war" />
		<property name="deploy.upload.location" value="${deploy.upload.dir}/${deploy.upload.name}" />

		<!-- Finally upload the file -->
		<scp keyfile="${deploy.keyfile}" passphrase="${deploy.passphrase}" trust="true"
			localFile="${war.location}"
			remoteTofile="${deploy.user.name}@${deploy.host}:${deploy.upload.location}" />
	</target>

	<!--
	  - Executes ${deploy.command} on ${deploy.host} via ssh.
	 -->
	<target name="-exec-deploy-command" depends="-upload-war" if="deploy.command">
		<property prefix="eval" file="${conf.dir}/${profile}/deploy.properties" />
		<property prefix="eval" file="${conf.dir}/default/deploy.properties" />
		<sshexec host="${deploy.host}" username="${deploy.user.name}" trust="true"
			keyfile="${deploy.keyfile}" passphrase="${deploy.passphrase}"
			command="${eval.deploy.command}" />
	</target>

	<!--
	  - Macro to merge property files. Invoked by the configure target.
	 -->
	<macrodef name="merge-properties">
		 <attribute name="name" />
		 <sequential>
			 <property file="${conf.dir}/${profile}/@{name}.properties" prefix="@{name}." />
			 <property file="${conf.dir}/default/@{name}.properties" prefix="@{name}." />

			 <mkdir dir="${build.conf.dir}" />
			 <echoproperties destfile="${build.conf.dir}/@{name}.properties">
				 <propertyset>
					 <propertyref prefix="@{name}." />
					 <mapper type="glob" from="@{name}.*" to="*" />
				 </propertyset>
			 </echoproperties>
		 </sequential>
	</macrodef>

	<!--
	  - Creates a backup of the current configuration (build.conf.dir).
	  - Invoked by the deploy and schema-export targets in order to
	  - backup/restore the local configuration.
	 -->
	<target name="-backup-config">
		<delete dir="${build.dir}/conf.bak" />
		<copy todir="${build.dir}/conf.bak">
			<fileset dir="${build.conf.dir}" />
		</copy>
	</target>

	<!--
	  - Restores a previously backed-up configuration.
	 -->
	<target name="-restore-config">
		<move todir="${build.conf.dir}">
			<fileset dir="${build.dir}/conf.bak" />
		</move>
		<touch><!-- This is for Eclipse's autodeploy... -->
			<fileset dir="${build.conf.dir}" />
		</touch>
	</target>

	<!--
	  - Sets the property ${dbconf} to either hsqldb, postgresql or mysql
	  - depending on the selected JDBC driver class.
	 -->
	<target name="-set-dbconf-by-driver" depends="configure">
		<condition property="dbconf" value="hsqldb">
			<equals arg1="${application.jdbc.driver_class}" arg2="org.hsqldb.jdbcDriver" />
		</condition>
		<condition property="dbconf" value="postgresql">
			<equals arg1="${application.jdbc.driver_class}" arg2="org.postgresql.Driver" />
		</condition>
		<condition property="dbconf" value="mysql">
			<equals arg1="${application.jdbc.driver_class}" arg2="com.mysql.jdbc.Driver" />
		</condition>
		<fail unless="dbconf">
			Unknown JDBC driver: ${application.jdbc.driver_class}
		</fail>
	</target>

	<!--
	  - Resolves the JDBC driver.
	 -->
	<target name="resolve-jdbc-driver" depends="-configure-ivy,-set-dbconf-by-driver">
		<ivy:resolve showprogress="false" />
		<condition property="conf.known">
			<contains string="${ivy.resolved.configurations}" substring="${dbconf}" />
		</condition>
		<fail unless="conf.known">
			Your ivy.xml file does not contain a configuration named '${dbconf}'
		</fail>
		<ivy:retrieve pattern="${web.lib.dir}/[artifact].[ext]" conf="${dbconf}" />
	</target>

	<!--
	  - Exports the database schema as SQL file.
	 -->
	<target name="schema-export" depends="-backup-config,configure,compile"
			description="Exports the DB schema as SQL file">

		<taskdef name="hibernatetool"
			classname="org.hibernate.tool.ant.HibernateToolTask"
			classpathref="classpath" />

		<mkdir dir="${build.dir}" />
		<property file="${build.conf.dir}/application.properties" />
		<echoproperties destfile="${build.dir}/hibernate.properties">
			<propertyset>
				<propertyref name="hibernate.dialect" />
				<propertyref prefix="jdbc." />
				<mapper type="glob" from="jdbc.*" to="hibernate.connection.*" />
			</propertyset>
		</echoproperties>

		<hibernatetool destdir="${build.dir}">
			<classpath>
				<pathelement location="${build.classes.dir}" />
				<pathelement location="${build.conf.dir}" />
				<path refid="classpath" />
			</classpath>

			<!-- Uncomment the following to use Hibernate annotations -->
			<!--
			<annotationconfiguration
					configurationfile="${web.dir}/WEB-INF/hibernate.cfg.xml"
					propertyfile="${build.dir}/hibernate.properties">
					<fileset id="mappings" dir="${basedir}">
						<include name="${web.dir}/WEB-INF/hibernate-mappings/*.hbm.xml" />
						<include name="${web.dir}/WEB-INF/lib/riot-*.jar" />
					</fileset>
				</annotationconfiguration>
			-->

			<configuration
				configurationfile="${web.dir}/WEB-INF/hibernate.cfg.xml"
				propertyfile="${build.dir}/hibernate.properties">
				<fileset id="mappings" dir="${basedir}">
					<include name="${web.dir}/WEB-INF/hibernate-mappings/*.hbm.xml" />
					<include name="${web.dir}/WEB-INF/lib/riot-*.jar" />
				</fileset>
			</configuration>

			<hbm2ddl drop="false" create="true" export="false" update="false"
					 outputfilename="${schema.name}" delimiter=";" format="true" />

		</hibernatetool>
		<antcall target="-restore-config" />
	</target>

	<!--
	  - Copies the shared HSQLDB to the local directory unless it already exists.
	 -->
	<target name="-init-local-db" if="hsqldb.shared.available" unless="hsqldb.local.available">
		<copy todir="${hsqldb.local.dir}">
			<fileset dir="${hsqldb.shared.dir}" />
		</copy>
	</target>

	<!--
	  - Copies the shared HSQLDB to the local directory.
	 -->
	<target name="update-local-db" depends="init"
			description="Copies the shared HSQLDB to the local directory">
		<fail unless="hsqldb.shared.available" message="Shared HSQLDB does not exist." />
		<copy todir="${hsqldb.local.dir}">
			<fileset dir="${hsqldb.shared.dir}" />
		</copy>				
	</target>

	<!--
	  - Copies the local HSQLDB to the shared directory.
	 -->
	<target name="update-shared-db" depends="init"
			description="Copies the local HSQLDB to the shared directory">
		<fail unless="hsqldb.local.available" message="Local HSQLDB does not exist." />
		<copy todir="${hsqldb.shared.dir}">
			<fileset dir="${hsqldb.local.dir}" />
		</copy>				
	</target>
	
	<!--
	  - Creates a dependency report as HTML file.
	 -->
	<target name="report" depends="resolve"
			description="Creates a dependency report as HTML file">
		
		<ivy:report todir="${build.dir}/reports" conf="runtime" graph="false" />

		<!--
		  - Uncomment the following block to generate a .dot file render it
		  - using GraphViz (if available). If you are using a Mac you can also
		  - import the .dot file into OmniGraffle.
		 -->

		<!--
		<property name="dotxsl.file" value="${build.dir}/report2dot.xsl" />
		<get src="http://www.riotfamily.org/ivy/report2dot.xsl"
				dest="${dotxsl.file}" />

			<ivy:report todir="${build.dir}/reports" conf="runtime" graph="false"
				xslfile="${dotxsl.file}" xslext="dot" />

			<exec executable="/usr/bin/dot">
				<arg value="-Tpng" />
				<arg value="-o${build.dir}/reports/dependencies.png" />
				<arg value="${build.dir}/reports/${ivy.organisation}-${ivy.module}-runtime.dot" />
			</exec>
		-->
	</target>

	<target name="-configure-ivy" depends="-install-ivy">
		<ivy:configure file="ivysettings.xml" />
	</target>

	<!--
	  - Invoked by skeleton.xml to perform initial setup.
	 -->
	<target name="setup" depends="resolve,resolve-jdbc-driver,webapp" />

	<!--
	  - Installs Ivy (if needed).
	 -->
	<target name="-install-ivy" depends="-download-ivy" if="ivy.downloaded">
		<taskdef resource="org/apache/ivy/ant/antlib.xml"
			uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar}"
			onerror="ignore" />
	</target>

	<!--
	  - Downloads the Ivy jar file from riotfamily.org.
	 -->
	<target name="-download-ivy" depends="-check-ivy" unless="ivy.available">
		<echo>This project uses Ivy (http://incubator.apache.org/ivy/) to manage dependencies.</echo>
		<echo>Since Ivy was not found in the classpath the JAR file will now be downloaded ...</echo>
		<delete dir="${lib.dir}" />
		<mkdir dir="${lib.dir}" />
		<get src="${ivy.download}" dest="${ivy.jar}" verbose="true" />
		<property name="ivy.downloaded" value="true" />
	</target>

	<!--
	  - Checks whether Ivy is available in the classpath.
	 -->
	<target name="-check-ivy">
		<available property="ivy.available"
			resource="org/apache/ivy/ant/antlib.xml"
			classpathref="classpath" />
	</target>

</project>