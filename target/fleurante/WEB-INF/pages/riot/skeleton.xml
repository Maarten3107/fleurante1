<project name="riot-setup" default="setup-project">

	<!--
	  - Sets up a new Riot project.
	  -->
	<target name="setup-project" depends="get-eclipse-project-name,add-wst-nature,add-conf-folder,get-directory-name">
		<replace dir="." token="@project-name@" value="${project.name}">
			<include name="build.xml" />
			<include name="ivy.xml" />
			<include name=".settings/org.eclipse.wst.common.component" />
		</replace>
		<delete file="classpath.patch" />
		<delete file="wst.patch" />
		<ant antfile="build.xml" target="setup" />
	</target>

	<!--
	  - Checks whether the directory contains an Eclipse .project file.
	  -->
	<target name="check-eclipse">
		<condition property="eclipse">
			<and>
				<available file=".project" />
				<available file=".classpath" />
				<isfalse value="${noeclipse}" />
			</and>
		</condition>
	</target>
	
	<!--
	  - Reads all properties from an Eclipse .project file.
	  -->
	<target name="parse-project-file" depends="check-eclipse" if="eclipse">
		<xmlproperty file=".project" />
	</target>
	
	<!--
	  - Sets the project.name property based on an existing .project file.
	  -->
	<target name="get-eclipse-project-name" depends="parse-project-file" if="projectDescription.name">
		<property name="project.name" value="${projectDescription.name}" />
		<echo message="Using project name set in Eclipse: ${project.name}" />
	</target>
	
	<!--
	  - Sets the project.name property based on the directory name.
	  -->
	<target name="get-directory-name" unless="project.name">
		<basename file="." property="project.name" />
		<echo message="Not an Eclipse project - using directory name as project name: ${project.name}" />
	</target>
	
	<!--
	  - Checks whether the project already has the WST nature.
	  -->
	<target name="check-project-nature" if="eclipse">
		<condition property="skip-add-wst">
			<contains 
				string="${projectDescription.natures.nature}" 
				substring="org.eclipse.wst.common.project.facet.core.nature" />
		</condition>
		<condition property="webcontent">
			<and>
				<available file="WebContent" />
				<available file=".settings/org.eclipse.wst.common.component" />
			</and>
		</condition>
	</target>

	<!--
	  - Changes the content directory form /WebContent to /webapp. WebContent
	  - is the default name set by Eclipse when a Dynamic Web Project is created.
	  -->
	<target name="rename-content-dir" if="webcontent">
		<replace dir=".settings" token="/WebContent" value="/webapp">
			<include name=".component" />
			<include name="org.eclipse.wst.common.component" />
		</replace>
		<delete dir="WebContent" />
	</target>
	
	<!--
	  - Adds the WST nature to an Eclipse project by applying the wst.patch file.
	  -->
	<target name="add-wst-nature" 
		depends="check-project-nature,rename-content-dir,confirm-add-wst,check-patch-support-wst" 
		if="patch.available" unless="skip-add-wst">
		
		<echo message="Adding WST nature ..." />
		<patch patchfile="wst.patch" />
	</target>
	
	<!--
	  - Prompts the user whether the WST project nature should be added.
	  -->
	<target name="confirm-add-wst" if="eclipse" unless="skip-add-wst">
<echo>
If you want to run your application from within Eclipse you can now convert your
project into a "Dynamic Web Project". Make sure you have installed the Eclipse
Web Standard Tools (WST). Pressing 'y' will apply a patch to your .project and
.classpath file.
</echo>
		<input validargs="y,n" addproperty="add-wst.input" defaultvalue="y" 
			message="Do you want to add the the WST project nature now? " />
		
		<condition property="skip-add-wst">
			<equals arg1="${add-wst.input}" arg2="n" />
		</condition>
	</target>
	
	<!--
	  - Adds the build/conf folder to the Eclipse classpath.
	  -->
	<target name="add-conf-folder" 
		depends="show-classpath-patch-message,check-patch-support" 
		if="patch.available">
		
		<patch patchfile="classpath.patch" />
	</target>
		
	<target name="show-classpath-patch-message" if="eclipse">
<echo>
In order to run your application from within Eclipse the folder build/conf must 
be added to the Eclipse build path. This folder contains the merged .properties
files created by your project's configure target. We will now try to apply a
patch file in order to perform this change automatically.
</echo>
	</target>
	
	<!--
	  - Checks patch support (only if wst patch needs to be applied).
	  -->
	<target name="check-patch-support-wst" unless="skip-add-wst">
		<antcall target="check-patch-support" />
	</target>
	
	<!--
	  - Checks whether the patch task is supported on the system that executes
	  - this build file.
	  -->
	<target name="check-patch-support" 
		depends="try-patch-execution,show-patch-support-message">
	</target>
	
	<!--
	  - Trys to execute 'patch -v'.
	  -->
	<target name="try-patch-execution" if="eclipse">
		<exec executable="patch" failifexecutionfails="false" 
			searchpath="true" resultproperty="patch.available">
			<arg value="-v" />
		</exec>
	</target>
	
	<!--
	  - Displays a message when the patch binary is not present.
	  -->
	<target name="show-patch-support-message" if="eclipse" unless="patch.available">
<echo>
The GNU patch program is not available on your system. You can either interrupt
the setup process and place the patch binary in your execution path or continue
without applying the patch.
</echo>
		<input validargs="y,n" addproperty="continue-without-patch.input" defaultvalue="y" 
				message="Do you want to continue without applying the patch? " />
				
		<condition property="continue-without-patch">
			<equals arg1="${continue-without-patch.input}" arg2="y" />
		</condition>
		<fail unless="continue-without-patch" message="Setup interrupted." />
	</target>
	
</project>